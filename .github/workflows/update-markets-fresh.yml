name: Update markets data

on:
  schedule:
    # Run at 13:30 UTC (09:30 Eastern) every day for testing
    - cron: "30 13 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install 'httpx[http2]'

      - name: Preflight: call proxy like a browser
        run: |
          set -euo pipefail
          echo "Plain curl (expect 200):"
          curl -iS "https://api.freshlocalharvest.org/api/usda.php?path=locSearch&lat=32.806671&lng=-86.79113" || true
          echo ""
          echo "Browser-like curl (expect 200):"
          curl -iS \
            -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36" \
            -H "Accept: application/json,text/plain,*/*" \
            -H "Referer: https://freshlocalharvest.org/" \
            -H "Origin: https://freshlocalharvest.org" \
            "https://api.freshlocalharvest.org/api/usda.php?path=locSearch&lat=32.806671&lng=-86.79113" || true

      - name: Export data from USDA Local Food Portal
        env:
          USDA_API_KEY: ${{ secrets.USDA_API_KEY }}
        run: |
          set -euo pipefail
          python scripts/export_markets.py

      - name: Verify markets.json has items
        run: |
          set -euo pipefail
          test -f site/static/data/markets.json || { echo "site/static/data/markets.json not found"; exit 1; }
          python - <<'PY'
          import json, sys, pathlib
          p = pathlib.Path("site/static/data/markets.json")
          try:
              data = json.loads(p.read_text(encoding="utf-8"))
          except Exception as e:
              print(f"Failed to parse {p}: {e}")
              sys.exit(1)
          def count_items(d):
              if isinstance(d, dict) and isinstance(d.get("items"), list):
                  return len(d["items"])
              if isinstance(d, list):
                  return len(d)
              for k in ("markets", "data", "results"):
                  v = d.get(k) if isinstance(d, dict) else None
                  if isinstance(v, list):
                      return len(v)
              return 0
          n = count_items(data)
          print(f"items_count={n}")
          if n <= 0:
              print("No items found; failing to avoid overwriting with empty data.")
              sys.exit(1)
          PY

      - name: Commit updated markets.json (if changed)
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add site/static/data/markets.json
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "chore(data): update markets.json"
            git push
          fi

      - name: Upload markets.db artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: markets-db
          path: db/markets.db
          if-no-files-found: ignore
